@page "/"
@using SOA_CA1.Service
@inject DogBreedsService DogBreedsService
@inject IWebHostEnvironment WebHostEnvironment


<PageTitle>Home</PageTitle>

<h3>Select a Dog Breed from the List</h3>

<select @bind="selectedBreed">
    <option value="">Select a breed...</option>
    @foreach (var breed in dogBreeds)
    {
        <option value="@breed">@breed</option>
    }
</select>

<button @onclick="FetchDogBreed" disabled="@(string.IsNullOrEmpty(selectedBreed))">Search</button>



@if (dogBreed != null)
{
    <div>
        <h4>Name: @dogBreed.name</h4>
        <p>Max-Height: @dogBreed.max_height_male</p>
        <p>Max-Weight: @dogBreed.max_weight_male</p>
        <p>Life Expectancy: @dogBreed.max_life_expectancy (years)</p>
        <p>Playfulness: @dogBreed.playfulness</p>
        <p>Protectiveness: @dogBreed.protectiveness</p>
        <p>Trainability: @dogBreed.trainability</p>
        <p>Barking: @dogBreed.barking</p>
    </div>
}
else if (isSearchComplete)
{
    <p>No breed found.</p>
}

@code {
    private List<string> dogBreeds = new List<string>(); // List of dog breeds from file
    private string selectedBreed; // Selected breed from dropdown
    private DogBreed dogBreed;
    private bool isSearchComplete = false;

    protected override async Task OnInitializedAsync()
    {
        // Load the breeds from a file (assuming it's in the wwwroot folder)
        string breedsFilePath = Path.Combine(WebHostEnvironment.WebRootPath, "ListDogBreed.txt");

        // Read the breeds from the file
        if (File.Exists(breedsFilePath))
        {
            dogBreeds = (await File.ReadAllLinesAsync(breedsFilePath)).ToList();
        }
    }

    // Method to call the service and fetch the dog breed based on the search term
    private async Task FetchDogBreed()
    {
        isSearchComplete = false;
        dogBreed = await DogBreedsService.GetDogBreedByNameAsync(selectedBreed);
        isSearchComplete = true;
    }
}