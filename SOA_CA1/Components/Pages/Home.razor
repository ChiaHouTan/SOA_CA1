@page "/"
@using SOA_CA1.Service
@inject IDogBreedsService DogBreedsService
@inject IWebHostEnvironment WebHostEnvironment


<PageTitle>Home</PageTitle>


<h3>Select a Dog Breed from the List</h3>

<select @bind="selectedBreed">
    <option value="">Select a breed...</option>
    @foreach (var breed in dogBreeds)
    {
        <option value="@breed">@breed</option>
    }
</select>

<button @onclick="FetchDogBreed" disabled="@(string.IsNullOrEmpty(selectedBreed))">Search</button>

<br /><br />



@if (dogBreed != null)
{
    <div class="table-home">
        <table>
            <tr>
                <th>Name:</th>
                <th>@dogBreed.name</th>
            </tr>

            <tr>
                <th>Max-Height:</th>
                <td>@dogBreed.max_height_male</td>
            </tr>
            <tr>
                <th>Max-Weight:</th>
                <td>@dogBreed.max_weight_male</td>
            </tr>
            <tr>
                <th>Life Expectancy:</th>
                <td>@dogBreed.max_life_expectancy (years)</td>
            </tr>
            <tr>
                <th>Playfulness: </th>
                <td>@dogBreed.playfulness</td>
            </tr>
            <tr>
                <th>Protectiveness:</th>
                <td>@dogBreed.protectiveness</td>
            </tr>
            <tr>
                <th>Trainability:</th>
                <td>@dogBreed.trainability</td>
            </tr>
            <tr>
                <th>Barking:</th>
                <td>@dogBreed.barking</td>
            </tr>
        </table>
    </div>

    <br />

    @if (dogImages != null && dogImages.Any())
    {
        <h5><b>Images:</b></h5>
        <div class="image-gallery">
            @foreach (var imageUrl in dogImages)
            {
                <div class="image-item">
                    <img src="@imageUrl" alt="Dog Image" />
                </div>
            }
        </div>
    }

}
else if (isSearchComplete)
{
    <p>No breed found.</p>
}

@code {
    private List<string> dogBreeds = new List<string>(); // List of dog breeds from file
    private string selectedBreed; // Selected breed from dropdown
    private DogBreed dogBreed;
    private string[] dogImages; // List of dog images
    private bool isSearchComplete = false;

    protected override async Task OnInitializedAsync()
    {
        // Load the breeds from a file (assuming it's in the wwwroot folder)
        string breedsFilePath = Path.Combine(WebHostEnvironment.WebRootPath, "ListDogBreed.txt");

        // Read the breeds from the file
        if (File.Exists(breedsFilePath))
        {
            dogBreeds = (await File.ReadAllLinesAsync(breedsFilePath)).ToList();
        }
    }

    // Method to call the service and fetch the dog breed based on the search term
    private async Task FetchDogBreed()
    {
        isSearchComplete = false;
        dogBreed = await DogBreedsService.GetDogBreedByNameAsync(selectedBreed);

        // Fetch random images for the selected breed
        if (dogBreed != null)
        {
            dogImages = await DogBreedsService.GetRandomImagesAsync(selectedBreed);
        }

        isSearchComplete = true;
    }
}